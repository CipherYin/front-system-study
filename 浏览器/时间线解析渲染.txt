时间线： 
    定义：在浏览器加载页面开始的那一刻到页面加载完全结束的这个过程中，按顺序发生的每一件事情的总流程
    1. document对象出现 -> JS起作用; 
    2. 解析文档，构建DOM树
        document.readyState = 'loading';
    3. 如果遇到link标签 开新的线程-> 异步加载css外部文件 style->CSSOM
    4. 没有设置异步加载的script,阻塞文档解析； 等待JS脚本加载并且执行完成后，继续解析文档
    5. 异步加载script,异步加载JS脚本并且执行，不阻塞解析文档（不能使用document.write()）。
    6. 解析文档遇到img, 先解析这个节点，
            src="",创建加载线程，异步加载图片资源，不阻塞解析文档
    7. 文档解析完成  
        document.readyState = 'interactive';
    8. 文档解析完成：defer script 异步加载，同步执行，等文档解析完成后执行 ; JS脚本开始按照顺序执行
    9. 文档解析完成；DomContentLoaded事件
        程序： 同步的脚本执行阶段->事件驱动阶段（用户可以跟页面进行交互）
    10. async script 加载并且执行完成，img等资源加载完毕，window对象中的onload事件才触发
         document.readyState = 'complate'
document.onreadyStatechange = function(){

} # JS引擎监听 


domReady -> document.prototype

Document.prototype.domReady = function(fn){
    if(this.addEventListener){
        this.addEventListener('DOMContentLoaded',function(){
        },false);
    }
}


//兼容性DOMContentLoaded
function domReady(fn){
    if(document.addEventListener){
        document.addEventListener('DOMContentLoaded',function(){
            // arguments.callee能拿到这个函数
                document.removeEventListener('DOMContentLoaded',arguments.callee,false)
                fn();
        },false)
    }else if(document.attachEvent){
        document.attachEvent('onreadystatechange',function(){
            if(this.readyState==='complate'){
                    document.detachEvent('onreadystatechange',arguments.callee);
                    fn();
            }
        })
    }
}